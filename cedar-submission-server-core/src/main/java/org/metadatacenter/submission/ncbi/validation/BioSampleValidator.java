package org.metadatacenter.submission.ncbi.validation;

import generated.BioSampleValidate;
import generated.TypeActionStatus;
import generated.TypeStatus;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.metadatacenter.submission.CEDARValidationResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;

public class BioSampleValidator
{
  final static Logger logger = LoggerFactory.getLogger(BioSampleValidator.class);

  private static final String BIOSAMPLE_VALIDATION_URL = "https://www.ncbi.nlm.nih.gov/projects/biosample/validate/";

  public BioSampleValidator() { }

  /**
   * Take XML containing a BioSample XML submission and send it to NCBI's BioSample validation REST endpoint.
   * <p>
   * The {@link CEDARValidationResponse} class is generated by jsonschems2pojo from the
   * CEDARValidationResponse.json JSON Schema file in the resources directory. It
   * is the CEDAR representation of the response from the BioSample validator.
   *
   * @param bioSampleSubmissionXML The submission XML
   * @return A response object
   * @throws IOException
   * @throws JAXBException
   * @throws IOException                    If an IO error occurs during processing
   * @throws JAXBException                  If a JAXB error occurs during processing
   * @throws DatatypeConfigurationException If a configuration error occurs during processing
   */
  public CEDARValidationResponse validateBioSampleSubmission(String bioSampleSubmissionXML)
  {
    CloseableHttpClient client = HttpClientBuilder.create().build();
    HttpPost post = new HttpPost(BIOSAMPLE_VALIDATION_URL);
    StringEntity requestEntity = new StringEntity(bioSampleSubmissionXML, ContentType.APPLICATION_XML);
    CloseableHttpResponse response = null;

    try {
      // TODO Temporary for debugging of generated XML - write a temporary file and log its location
      File ncbiXMLSubmissionFile = File.createTempFile("NcbiSubmission", ".xml");
      logger.info("Temporary SRA submission XML file path:" + ncbiXMLSubmissionFile.toPath() + ":");
      PrintWriter writer = new PrintWriter(ncbiXMLSubmissionFile);
      writer.print(bioSampleSubmissionXML);
      writer.close();
      logger.info("Generated temporary SRA submission XML file " + ncbiXMLSubmissionFile.toPath());

      post.setHeader("Accept", "application/xml");
      post.setHeader("Content-type", "application/xml");
      post.setEntity(requestEntity);

      response = client.execute(post);

      if (response.getStatusLine().getStatusCode() == 200) {
        HttpEntity entity = response.getEntity();
        InputStream xmlResponseStream = entity.getContent();
        BioSampleValidate bioSampleValidationResponse = bioSampleXMLResponse2BioSampleValidate(xmlResponseStream);
        return bioSampleValidationResponse2CEDARValidationResponse(bioSampleValidationResponse);
      } else {
        return generateUnexpectedStatusCodeCEDARValidationResponse(response.getStatusLine().getStatusCode());
      }
    } catch (IOException | JAXBException e) {
      return generateUnexpectedConnectionErrorCEDARValidationResponse(e.getMessage());
    } finally {
      if (response != null) {
        try {
          response.close();
        } catch (IOException e) {
          logger.warn("Error closing HTTP response for NCBI BioSample validator");
        }
      }
    }
  }

  /**
   * The {@link CEDARValidationResponse} class is generated by jsonschema2pojo from the
   * CEDARValidationResponse.json JSON Schema file in the resources directory.
   *
   * @param statusCode A HTTP status code
   * @return A validation response message
   */
  private CEDARValidationResponse generateUnexpectedStatusCodeCEDARValidationResponse(int statusCode)
  {
    CEDARValidationResponse cedarValidationResponse = new CEDARValidationResponse();
    List<String> messages = new ArrayList<>();
    String message = "Unexpected status code " + statusCode + " returned by BioSample validation service";
    cedarValidationResponse.setMessages(messages);
    messages.add(message);
    cedarValidationResponse.setIsValid(false);

    return cedarValidationResponse;
  }

  /**
   * The {@link CEDARValidationResponse} class is generated by jsonschema2pojo from the
   * CEDARValidationResponse.json JSON Schema file in the resources directory.
   *
   * @param errorMessage An error message
   * @return A validation response message
   */
  private CEDARValidationResponse generateUnexpectedConnectionErrorCEDARValidationResponse(String errorMessage)
  {
    CEDARValidationResponse cedarValidationResponse = new CEDARValidationResponse();
    List<String> messages = new ArrayList<>();
    String message = "Unexpected error calling BioSample validation service: " + errorMessage;
    cedarValidationResponse.setMessages(messages);
    messages.add(message);
    cedarValidationResponse.setIsValid(false);

    return cedarValidationResponse;
  }

  /**
   * Translate a validation response from NCBI's BioSample validator and translate it into a
   * CEDAR validation respose.
   * <p>
   * The {@link CEDARValidationResponse} class is generated by jsonschema2pojo from the
   * CEDARValidationResponse.json JSON Schema file in the resources directory.
   * <p>
   * The {@link BioSampleValidate} class is generated by JAXB from the submission-response.xsd file
   * in the resources directory. It represents a response from the BioSample validator.
   *
   * @param validationResponse A BioSample validation response
   * @return A CEDAR
   */
  private CEDARValidationResponse bioSampleValidationResponse2CEDARValidationResponse(
    BioSampleValidate validationResponse)
  {
    CEDARValidationResponse cedarValidationResponse = new CEDARValidationResponse();
    List<String> messages = new ArrayList<>();
    cedarValidationResponse.setMessages(messages);

    List<TypeActionStatus> actionStatuses = validationResponse.getAction();
    if (!actionStatuses.isEmpty()) {
      TypeActionStatus actionStatus = actionStatuses.get(0);
      TypeStatus status = actionStatus.getStatus();
      if (status == TypeStatus.PROCESSED_OK) {
        cedarValidationResponse.setIsValid(true);
      } else {
        cedarValidationResponse.setIsValid(false);
      }

      // There can be warning messages from the validator even if validation passes
      List<TypeActionStatus.Response> statusResponses = actionStatus.getResponse();
      for (TypeActionStatus.Response statusResponse : statusResponses) {
        String message = statusResponse.getMessage().getValue();
        messages.add(message);
      }
    }
    return cedarValidationResponse;
  }

  /**
   * Generate a CEDAR-based response from an XML-based BioSample validation response.
   * <p>
   * The {@link BioSampleValidate} class is generated by JAXB from the submission-response.xsd file
   * in the resources directory. It represents a response from the BioSample validator. It can
   * be automatically translated into a REST service JSON response.
   *
   * @param xmlResponseStream A stream containing the XML response from the BioSample validator
   * @return A Java representation of the XML response
   * @throws JAXBException If there is an error during processing
   */
  private BioSampleValidate bioSampleXMLResponse2BioSampleValidate(InputStream xmlResponseStream) throws JAXBException
  {
    JAXBContext jaxbBioSampleValidateContext = JAXBContext.newInstance(BioSampleValidate.class);
    Unmarshaller jaxbBioSampleValidateUnmarshaller = jaxbBioSampleValidateContext.createUnmarshaller();
    BioSampleValidate bioSampleValidate = (BioSampleValidate)jaxbBioSampleValidateUnmarshaller
      .unmarshal(xmlResponseStream);
    return bioSampleValidate;
  }
}
